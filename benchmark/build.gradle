plugins {
    // Base Plugins
    id 'application'
    id 'idea'

    // Jextract Plugin
    id 'io.github.krakowski.jextract' version '0.4.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(20))
    }
}

applicationName = 'benchmark'
mainClassName = 'de.hhu.bsinfo.skema.benchmark.App'

application.applicationDefaultJvmArgs += [
        '--enable-native-access=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.math=ALL-UNNAMED',
        '--add-opens', 'java.base/java.time=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens', 'java.base/java.net=ALL-UNNAMED',
        '--add-opens', 'java.base/java.text=ALL-UNNAMED',
        '--add-opens', 'java.sql/java.sql=ALL-UNNAMED'
]

project.startScripts.with {
    doLast {
        // The HotSpot VM uses the SIGSEGV signal for its own purposes,
        // which may interfere with signal handlers installed by the ucx library.
        // Therefore, we turn off signal handlers with this (ugly) hack.
        // Also, we enable the SO_REUSEPORT socket flag so that server applications
        // are able to restart fast after a configuration change.
        unixScript.text = unixScript.text.replaceFirst('exec ', 'UCX_ERROR_SIGNALS="" UCX_TCP_CM_REUSEADDR=y exec ')
    }
}

if (project.hasProperty('installPath')) {
    installDist {
        destinationDir = project.file(project.property('installPath'))
    }
}

jextract.enabled = false

group = 'de.hhu.bsinfo'

dependencies {

    // Skema
    implementation project(':core')

    // Other Serialization Libraries
    implementation "com.esotericsoftware:kryo:${kryoVersion}"
    implementation "de.ruedigermoeller:fst:${fstVersion}"

    // Command Line Application Framework
    implementation "info.picocli:picocli:${picocliVersion}"

    // Log4j Logger
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"

    // JMH Benchmarking Framework
    implementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
    annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"

    // AssertJ
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

test {
    useJUnitPlatform()
}